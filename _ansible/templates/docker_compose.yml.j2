#jinja2: trim_blocks:False
services:
{%- for service in stack.services %}
  {{ service.name }}:
    image: {{ service.image }}
    container_name: {{ service.name }}
    {%- if 'user' in service %}
    user: {{ service.user }}
    {%- endif %}
    {%- if 'command' in service %}
    {%- if service.command is string %}
    command: {{ service.command }}
    {% else %}
    command:
      {%- for cmd in service.command %}
      - "{{ cmd }}"
      {%- endfor %}
    {%- endif %}
    {%- endif %}
    restart: unless-stopped
    {%- if 'ports' in service %}
    ports:
      {%- for port in service.ports %}
      - {{ port }}
      {%- endfor %}
    {%- endif %}
    {%- if 'exposed' in service or 'sablier' in stack %}
    labels:
      {%- if 'exposed' in service %}
      {% if service.exposed.internal -%}
        - traefik.enable=true
      {% endif -%}
      - traefik.http.services.{{ service.name }}.loadbalancer.server.port={{ service.exposed.port }}
      {%- if 'external' in service.exposed and service.exposed.external %}
      - show.external=true
      {%- endif %}
      {%- endif %}
      {%- if 'sablier' in stack %}
      - sablier.enable=true
      - sablier.group={{ stack.sablier.group }}
      {%- endif %}
    {%- endif %}
    {%- if 'envFile' in service and service.envFile %}
    env_file:
      - {{ service.name }}.env
    {%- endif %}
    {%- if 'env' in service %}
    environment:
      {%- if service.env is mapping %}
      {%- for key, value in service.env.items() %}
      {{ key }}: "{{ value }}"
      {%- endfor %}
      {%- else %}
      {%- for value in service.env %}
      - {{ value }}
      {%- endfor %}
      {%- endif %}
    {%- endif %}
    {%- if 'volumes' in service %}
    volumes:
      {%- for volume in service.volumes %}
      {%- set permissions = ('permissions' in volume) | ternary(':' + volume.permissions | default(''), '') %}
      {% if 'local' in volume -%}- ./{{ volume.local }}:{{ volume.container }}{{ permissions }}{%- endif -%}
      {%- if 'data' in volume -%}- {{ baseDataDir }}/{{ stackName }}/{{ volume.data }}:{{ volume.container }}{{ permissions }}{%- endif %}
      {%- if 'file' in volume -%}- ./{{ volume.file }}:{{ volume.container }}{{ permissions }}{%- endif %}
      {%- if 'shared' in volume -%}- {{ sharedDirs[volume.shared] }}:{{ volume.container }}{{ permissions }}{%- endif %}
      {%- if 'filesystem' in volume -%}- {{ volume.filesystem }}:{{ volume.container }}{{ permissions }}{%- endif %}
      {%- endfor %}
    {%- endif %}
    {%- if 'securityOpts' in service %}
    security_opt:
      {%- for secOpt in service.securityOpts %}
      - {{ secOpt }}
      {%- endfor %}
    {%- endif -%}
    {%- if 'devices' in service %}
    devices:
      {%- for device in service.devices %}
      - {{ device }}
      {%- endfor %}
    {%- endif -%}
    {%- if 'pid' in service %}
    pid: {{ service.pid }}
    {%- endif -%}
    {%- if 'extraHosts' in service %}
    extra_hosts:
      {%- for host in service.extraHosts %}
      - {{ host }}
      {%- endfor %}
    {%- endif %}
    {%- if 'addGpu' in service and service.addGpu %}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    {%- endif %}
    {%- if 'dependsOn' in service %}
    depends_on:
      {%- for svc in service.dependsOn %}
      - {{ svc }}
      {%- endfor %}
    {%- endif %}
    {%- if 'healthcheck' in service %}
    healthcheck:
      {% if service.healthcheck.tool is not defined -%}
      test: "curl -f {{ service.healthcheck.url }}"
      {%- else -%}
      test: "wget --no-verbose --tries=1 --spider {{ service.healthcheck.url }} || exit 1"
      {%- endif %}
      interval: {{ service.healthcheck.interval|default("2m") }}
      timeout: {{ service.healthcheck.timeout|default("30s") }}
      retries: {{ service.healthcheck.retries|default("5") }}
      start_period: {{ service.healthcheck.startPeriod|default("30s") }}
      start_interval: {{ service.healthcheck.startInterval|default("5s") }}
    {%- endif -%}
{%- endfor %}

networks:
  default:
    external: true
    name: ctr-network
